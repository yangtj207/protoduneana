#include "services_refactored_pdune.fcl"
#include "services_dune.fcl"
#include "singles_dune.fcl"

process_name: SinglesGen

# Heavily based on /dunesw/fcl/protodune/gen/protoDUNE_gensingle.fcl

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "prod_pdsp_double_cosmic_hist.root" }
  TimeTracker: {}
  RandomNumberGenerator: {} #ART native random number generator
  @table::protodune_simulation_services
  FileCatalogMetadata: @local::art_file_catalog_mc
}

# Start each new event with empty event
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents: 100            # Number of events to create
  firstRun: 1             # Run number to use for this file
  firstEvent: 1           # Number of first event in the file
}

# Define and configure modules to do work on each event
# Modules are defined first and scheduled later
# Modules are grouped by type

physics:
{

 producers:
 {
   generator: @local::dunefd_singlep
   rns:       { module_type: "RandomNumberSaver" }
 }

 # Define the producer and filter modules for this path (order matters)
 # Filters reject all items that follow
 simulate: [ rns, generator]
 
 # Define the output stream (could be more than one if using filters)
 stream1: [ out1 ]

 # Keyword trigger_paths contains paths which modify the art::Event
 # (= filters and producers)
 trigger_paths: [ simulate ]
 
 # Keyword end_paths contains paths which DO NOT modify the art::Event
 # (= analyzers and output streams)
 # These paths runs simultaneously
 end_paths: [ stream1 ]

}

# Define where output goes in this block
# If filter is defined in physics block and in trigger_paths, an entry 
# of SelectEvents: {SelectEvents: [XXX]} is necessary in output stream
# where you want those events to go (XXX = label of filter module(s))
outputs: 
{
 out1:
 {
   module_type: RootOutput
   fileName:    "gen_pdsp_two_cosmics.root" # Default; use -o or --output in CL to override
   dataTier: "generated" 
   compressionLevel: 1
 }
}

# Set generator parameters
# Corresponds to beam window at center of left TPC 

physics.producers.generator.PDG: [13,13,13]          # Particle ID
physics.producers.generator.PDist: 0           # Momentum distribution (0=uniform, 1=gaussian)
physics.producers.generator.P0: [10.0,10.0,10.0]          # Central value of momentum (GeV)
physics.producers.generator.SigmaP: [0.0]      # Width of momentum distribution

# Define starting parameters for (beam window 3 with beam plug) protodune_v4.gdml geometry
physics.producers.generator.PosDist: 0         # Position distribution (0=uniform, 1=gaussian)
physics.producers.generator.X0: [10.00,175.00,320.00]# Starting position (cm)
physics.producers.generator.Y0: [250.00,300.00,350.00]# Start in the middle of the detector in Y
physics.producers.generator.Z0: [-150.00]      # Start upstream of upstream CRTs
physics.producers.generator.SigmaX: [0.0]
physics.producers.generator.SigmaY: [0.0]
physics.producers.generator.SigmaZ: [0.0]

physics.producers.generator.AngleDist:0        # Angle distribution (0=uniform, 1=gaussian)
physics.producers.generator.Theta0XZ: [0.0]    # Starting angles (degrees)
physics.producers.generator.Theta0YZ: [0.0]    
physics.producers.generator.SigmaThetaXZ: [0.0]
physics.producers.generator.SigmaThetaYZ: [0.0]
physics.producers.generator.PadOutVectors: "true"